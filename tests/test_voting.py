"""–¢–µ—Å—Ç—ã –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""

import unittest
import tempfile
import os
from datetime import date, timedelta
from unittest.mock import patch

from database import DatabaseManager
from voting import VotingService
from models import User, VoteStatus


class TestVotingService(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è VotingService"""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ë–î –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        self.temp_db = tempfile.NamedTemporaryFile(delete=False, suffix='.db')
        self.temp_db.close()
        
        self.db = DatabaseManager(self.temp_db.name)
        self.voting_service = VotingService(self.db)
    
    def tearDown(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤"""
        os.unlink(self.temp_db.name)
    
    def test_generate_weekend_dates(self):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–Ω–µ–π"""
        # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ - –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
        start_date = date(2024, 1, 1)  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
        weekends = self.voting_service.generate_weekend_dates(start_date, weeks=2)
        
        # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 4 –¥–Ω—è (2 –Ω–µ–¥–µ–ª–∏ * 2 –¥–Ω—è)
        self.assertEqual(len(weekends), 4)
        
        # –ü–µ—Ä–≤–∞—è —Å—É–±–±–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 6 —è–Ω–≤–∞—Ä—è
        self.assertEqual(weekends[0], date(2024, 1, 6))
        # –ü–µ—Ä–≤–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 7 —è–Ω–≤–∞—Ä—è
        self.assertEqual(weekends[1], date(2024, 1, 7))
        # –í—Ç–æ—Ä–∞—è —Å—É–±–±–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 13 —è–Ω–≤–∞—Ä—è
        self.assertEqual(weekends[2], date(2024, 1, 13))
        # –í—Ç–æ—Ä–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 14 —è–Ω–≤–∞—Ä—è
        self.assertEqual(weekends[3], date(2024, 1, 14))
    
    def test_generate_weekend_dates_from_saturday(self):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–Ω–µ–π –Ω–∞—á–∏–Ω–∞—è —Å —Å—É–±–±–æ—Ç—ã"""
        start_date = date(2024, 1, 6)  # –°—É–±–±–æ—Ç–∞
        weekends = self.voting_service.generate_weekend_dates(start_date, weeks=1)
        
        self.assertEqual(len(weekends), 2)
        self.assertEqual(weekends[0], date(2024, 1, 6))  # –≠—Ç–∞ —Å—É–±–±–æ—Ç–∞
        self.assertEqual(weekends[1], date(2024, 1, 7))  # –≠—Ç–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
    
    def test_create_voting(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""
        chat_id = 123
        voting = self.voting_service.create_voting(chat_id, "–¢–µ—Å—Ç–æ–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ")
        
        self.assertIsNotNone(voting.voting_id)
        self.assertEqual(voting.chat_id, chat_id)
        self.assertEqual(voting.title, "–¢–µ—Å—Ç–æ–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ")
        self.assertEqual(voting.status, VoteStatus.ACTIVE)
        self.assertEqual(len(voting.options), 8)  # 4 –Ω–µ–¥–µ–ª–∏ * 2 –¥–Ω—è
    
    def test_create_voting_with_existing_active(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ"""
        chat_id = 123
        
        # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
        self.voting_service.create_voting(chat_id)
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –≤—Ç–æ—Ä–æ–µ - –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞
        with self.assertRaises(ValueError) as context:
            self.voting_service.create_voting(chat_id)
        
        self.assertIn("—É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ", str(context.exception))
    
    def test_vote_for_option(self):
        """–¢–µ—Å—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞ –æ–ø—Ü–∏—é"""
        chat_id = 123
        user_id = 456
        
        # –°–æ–∑–¥–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
        voting = self.voting_service.create_voting(chat_id)
        option_id = voting.options[0].option_id
        
        # –ì–æ–ª–æ—Å—É–µ–º
        success, message = self.voting_service.vote_for_option(user_id, option_id, voting.voting_id)
        
        self.assertTrue(success)
        self.assertEqual(message, "–ì–æ–ª–æ—Å –∑–∞—Å—á–∏—Ç–∞–Ω!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥–æ–ª–æ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω
        updated_voting = self.db.get_voting(voting.voting_id)
        self.assertTrue(updated_voting.has_user_voted_for_option(user_id, option_id))
    
    def test_vote_for_same_option_twice(self):
        """–¢–µ—Å—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞ —Ç—É –∂–µ –æ–ø—Ü–∏—é"""
        chat_id = 123
        user_id = 456
        
        voting = self.voting_service.create_voting(chat_id)
        option_id = voting.options[0].option_id
        
        # –ü–µ—Ä–≤—ã–π –≥–æ–ª–æ—Å
        self.voting_service.vote_for_option(user_id, option_id, voting.voting_id)
        
        # –í—Ç–æ—Ä–æ–π –≥–æ–ª–æ—Å –∑–∞ —Ç—É –∂–µ –æ–ø—Ü–∏—é
        success, message = self.voting_service.vote_for_option(user_id, option_id, voting.voting_id)
        
        self.assertFalse(success)
        self.assertIn("—É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏", message)
    
    def test_remove_vote(self):
        """–¢–µ—Å—Ç –æ—Ç–º–µ–Ω—ã –≥–æ–ª–æ—Å–∞"""
        chat_id = 123
        user_id = 456
        
        voting = self.voting_service.create_voting(chat_id)
        option_id = voting.options[0].option_id
        
        # –°–Ω–∞—á–∞–ª–∞ –≥–æ–ª–æ—Å—É–µ–º
        self.voting_service.vote_for_option(user_id, option_id, voting.voting_id)
        
        # –ó–∞—Ç–µ–º –æ—Ç–º–µ–Ω—è–µ–º –≥–æ–ª–æ—Å
        success, message = self.voting_service.remove_vote(user_id, option_id, voting.voting_id)
        
        self.assertTrue(success)
        self.assertEqual(message, "–ì–æ–ª–æ—Å –æ—Ç–º–µ–Ω–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥–æ–ª–æ—Å —É–¥–∞–ª–µ–Ω
        updated_voting = self.db.get_voting(voting.voting_id)
        self.assertFalse(updated_voting.has_user_voted_for_option(user_id, option_id))
    
    def test_remove_nonexistent_vote(self):
        """–¢–µ—Å—Ç –æ—Ç–º–µ–Ω—ã –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –≥–æ–ª–æ—Å–∞"""
        chat_id = 123
        user_id = 456
        
        voting = self.voting_service.create_voting(chat_id)
        option_id = voting.options[0].option_id
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–º–µ–Ω–∏—Ç—å –≥–æ–ª–æ—Å, –Ω–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–≤
        success, message = self.voting_service.remove_vote(user_id, option_id, voting.voting_id)
        
        self.assertFalse(success)
        self.assertIn("–Ω–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏", message)
    
    def test_get_voting_stats(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""
        chat_id = 123
        user_id1 = 456
        user_id2 = 789
        
        voting = self.voting_service.create_voting(chat_id)
        option_id = voting.options[0].option_id
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î
        user1 = User(user_id1, "user1", "User", "One")
        user2 = User(user_id2, "user2", "User", "Two")
        self.db.save_user(user1)
        self.db.save_user(user2)
        
        # –ì–æ–ª–æ—Å—É–µ–º –ø–µ—Ä–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        self.voting_service.vote_for_option(user_id1, option_id, voting.voting_id)
        
        stats = self.voting_service.get_voting_stats(voting.voting_id)
        
        self.assertIsNotNone(stats)
        self.assertEqual(stats['voting_id'], voting.voting_id)
        self.assertEqual(stats['voted_users'], 1)
        self.assertEqual(len(stats['options']), 8)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–≤–æ–π –æ–ø—Ü–∏–∏
        first_option_stats = stats['options'][0]
        self.assertEqual(first_option_stats['votes_count'], 1)
        self.assertIn(user_id1, first_option_stats['voters'])
    
    def test_get_non_voted_users(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        chat_id = 123
        user_id1 = 456
        user_id2 = 789
        
        voting = self.voting_service.create_voting(chat_id)
        option_id = voting.options[0].option_id
        
        user1 = User(user_id1, "user1", "User", "One")
        user2 = User(user_id2, "user2", "User", "Two")
        all_users = [user1, user2]
        
        # –ì–æ–ª–æ—Å—É–µ—Ç —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        self.voting_service.vote_for_option(user_id1, option_id, voting.voting_id)
        
        non_voted = self.voting_service.get_non_voted_users(voting.voting_id, all_users)
        
        self.assertEqual(len(non_voted), 1)
        self.assertEqual(non_voted[0].user_id, user_id2)
    
    def test_format_voting_message(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""
        chat_id = 123
        user_id = 456
        
        voting = self.voting_service.create_voting(chat_id, "–¢–µ—Å—Ç")
        option_id = voting.options[0].option_id
        
        # –ì–æ–ª–æ—Å—É–µ–º
        self.voting_service.vote_for_option(user_id, option_id, voting.voting_id)
        
        message = self.voting_service.format_voting_message(voting.voting_id)
        
        self.assertIn("üó≥ **–¢–µ—Å—Ç**", message)
        self.assertIn("üìä –ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–æ: 1/1", message)
        self.assertIn("1 –≥–æ–ª–æ—Å–æ–≤", message)  # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—á–µ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤


if __name__ == "__main__":
    unittest.main() 