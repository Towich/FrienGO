import asyncio
import logging
import os
from typing import List, Optional

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, 
    ContextTypes, MessageHandler, filters
)
from telegram.constants import ParseMode

from models import User, VoteStatus
from database import DatabaseManager
from voting import VotingService
from scheduler import PingScheduler


class FrienGoBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π –æ –≤—Å—Ç—Ä–µ—á–∞—Ö"""
    
    def __init__(self, token: str, db_path: str = "friendgo.db"):
        self.token = token
        self.db = DatabaseManager(db_path)
        self.voting_service = VotingService(self.db)
        self.scheduler = PingScheduler(self.db, self.voting_service)
        self.application = Application.builder().token(token).build()
        self.logger = logging.getLogger(__name__)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        self.scheduler.set_ping_callback(self._send_ping_message)
        
        self._setup_handlers()
    
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ callback'–æ–≤"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("join", self.join_command))
        self.application.add_handler(CommandHandler("users", self.users_command))
        self.application.add_handler(CommandHandler("vote", self.create_voting_command))
        self.application.add_handler(CommandHandler("ping", self.ping_command))
        self.application.add_handler(CommandHandler("close", self.close_voting_command))
        
        # Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        self.application.add_error_handler(self.error_handler)
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        if user:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
            db_user = User(
                user_id=user.id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name
            )
            self.db.save_user(db_user)
        
        welcome_text = (
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç FrienGO –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤—Å—Ç—Ä–µ—á —Å –¥—Ä—É–∑—å—è–º–∏!\n\n"
            "üë§ –ò—Å–ø–æ–ª—å–∑—É–π /join —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
            "üó≥ –ò—Å–ø–æ–ª—å–∑—É–π /vote —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –æ –¥–Ω—è—Ö –≤—Å—Ç—Ä–µ—á–∏\n"
            "üì¢ –ò—Å–ø–æ–ª—å–∑—É–π /ping —á—Ç–æ–±—ã –Ω–∞–ø–æ–º–Ω–∏—Ç—å –¥—Ä—É–∑—å—è–º –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å\n"
            "‚ùì –ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å–ø—Ä–∞–≤–∫–∏\n\n"
            "–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –≤–∞—à—É –≤—Å—Ç—Ä–µ—á—É! üöÄ"
        )
        
        await update.message.reply_text(welcome_text)
    
    async def join_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /join - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ"""
        user = update.effective_user
        if not user:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        db_user = User(
            user_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
        self.db.save_user(db_user)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        existing_user = self.db.get_user(user.id)
        if existing_user:
            user_display = existing_user.display_name
            username_part = f" (@{existing_user.username})" if existing_user.username else ""
            
            register_text = (
                f"‚úÖ **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
                f"üë§ **–ò–º—è:** {user_display}{username_part}\n"
                f"üÜî **ID:** {user.id}\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!\n"
                f"üì¢ –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è—Ö –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å.\n\n"
                f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /vote –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∏–ª–∏ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥."
            )
        else:
            register_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        
        await update.message.reply_text(register_text, parse_mode=ParseMode.MARKDOWN)
    
    async def users_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /users - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        all_users = self.db.get_all_users()
        
        if not all_users:
            await update.message.reply_text(
                "üì≠ –í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /join –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è!"
            )
            return
        
        users_text = f"üë• **–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({len(all_users)}):**\n\n"
        
        for i, user in enumerate(all_users, 1):
            user_display = user.display_name
            username_part = f" (@{user.username})" if user.username else ""
            users_text += f"{i}. {user_display}{username_part} (ID: {user.user_id})\n"
        
        users_text += f"\nüí° –í—Å–µ —ç—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±—É–¥—É—Ç –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è—Ö."
        
        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(users_text) > 4000:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç–¥–µ–ª—å–Ω–æ
            header = f"üë• **–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({len(all_users)}):**\n\n"
            await update.message.reply_text(header, parse_mode=ParseMode.MARKDOWN)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≥—Ä—É–ø–ø–∞–º–∏ –ø–æ 20
            chunk_size = 20
            for i in range(0, len(all_users), chunk_size):
                chunk_users = all_users[i:i + chunk_size]
                chunk_text = ""
                for j, user in enumerate(chunk_users, i + 1):
                    user_display = user.display_name
                    username_part = f" (@{user.username})" if user.username else ""
                    chunk_text += f"{j}. {user_display}{username_part} (ID: {user.user_id})\n"
                
                await update.message.reply_text(chunk_text, parse_mode=ParseMode.MARKDOWN)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–ª—é—á–µ–Ω–∏–µ
            footer = f"\nüí° –í—Å–µ —ç—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±—É–¥—É—Ç –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è—Ö."
            await update.message.reply_text(footer, parse_mode=ParseMode.MARKDOWN)
        else:
            await update.message.reply_text(users_text, parse_mode=ParseMode.MARKDOWN)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = (
            "üìñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º FrienGO –±–æ—Ç–∞**\n\n"
            "**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
            "üë§ `/join` - –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–∏—Å—Ç–µ–º–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
            "üë• `/users` - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            "üó≥ `/vote` - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –æ –¥–Ω—è—Ö –≤—Å—Ç—Ä–µ—á–∏\n"
            "üì¢ `/ping` - –ù–∞–ø–æ–º–Ω–∏—Ç—å –Ω–µ–ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–≤—à–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º\n"
            "üèÅ `/close` - –ó–∞–≤–µ—Ä—à–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∏ –ø–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n\n"
            "**–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**\n"
            "0Ô∏è‚É£ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π `/join` –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
            "1Ô∏è‚É£ –°–æ–∑–¥–∞–π—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π `/vote`\n"
            "2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–Ω–∏, –Ω–∞–∂–∏–º–∞—è –Ω–∞ –∫–Ω–æ–ø–∫–∏\n"
            "3Ô∏è‚É£ –ú–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –≥–æ–ª–æ—Å, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ\n"
            "4Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/ping` —á—Ç–æ–±—ã –Ω–∞–ø–æ–º–Ω–∏—Ç—å –¥—Ä—É–∑—å—è–º\n"
            "5Ô∏è‚É£ –ó–∞–≤–µ—Ä—à–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π `/close`\n\n"
            "**–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:**\n"
            "‚è∞ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–ø–æ–º–Ω–∏—Ç —á–µ—Ä–µ–∑ 24, 48 –∏ 72 —á–∞—Å–∞\n\n"
            "**–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**\n"
            "‚úÖ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä –¥–Ω–µ–π\n"
            "üîÑ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–º–µ–Ω—ã –≥–æ–ª–æ—Å–∞\n"
            "üìä –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥—Å—á–µ—Ç –≥–æ–ª–æ—Å–æ–≤\n"
            "üë• –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–≤—à–∏—Ö\n"
            "üìå –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ–º\n"
            "üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
            "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è! üéâ"
        )
        
        await update.message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN)
    
    async def create_voting_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /vote - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""
        chat_id = update.effective_chat.id
        user = update.effective_user
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user:
            db_user = User(
                user_id=user.id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name
            )
            self.db.save_user(db_user)
        
        try:
            # –†–∞—Å–∫—Ä–µ–ø–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
            last_message_id = self.db.get_last_closed_voting_message_id(chat_id)
            if last_message_id:
                try:
                    await self.application.bot.unpin_chat_message(
                        chat_id=chat_id,
                        message_id=last_message_id
                    )
                    self.logger.info(f"Unpinned previous voting message {last_message_id} in chat {chat_id}")
                except Exception as e:
                    self.logger.warning(f"Failed to unpin previous message: {e}")
            
            # –°–æ–∑–¥–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
            voting = self.voting_service.create_voting(chat_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            message_text = self._format_voting_message(voting.voting_id)
            keyboard = self._create_voting_keyboard(voting.voting_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            sent_message = await update.message.reply_text(
                message_text,
                reply_markup=keyboard,
                parse_mode=ParseMode.MARKDOWN
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î
            self.db.update_voting_message_id(voting.voting_id, sent_message.message_id)
            
            # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ–º
            try:
                await self.application.bot.pin_chat_message(
                    chat_id=chat_id,
                    message_id=sent_message.message_id,
                    disable_notification=True  # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–∏
                )
                self.logger.info(f"Pinned voting message {sent_message.message_id} in chat {chat_id}")
            except Exception as e:
                self.logger.warning(f"Failed to pin message: {e}. Bot may not have admin rights.")
                # –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä–µ–ø–∏—Ç—å
            
        except ValueError as e:
            await update.message.reply_text(f"‚ùå {str(e)}")
        except Exception as e:
            self.logger.error(f"Error creating voting: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è")
    
    async def ping_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ping - –Ω–∞–ø–æ–º–Ω–∏—Ç—å –Ω–µ–ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–≤—à–∏–º"""
        chat_id = update.effective_chat.id
        
        voting = self.voting_service.get_active_voting(chat_id)
        if not voting:
            await update.message.reply_text("üìù –í –¥–∞–Ω–Ω–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤–∫–ª—é—á–∞—è –Ω–æ–≤—ã—Ö –¥—Ä—É–∑–µ–π)
        all_users = self.db.get_all_users()
        non_voted_users = self.voting_service.get_non_voted_users(voting.voting_id, all_users)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏–Ω–≥ –º–æ–ª—á–∞ (–±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è)
        await self.scheduler.send_manual_ping(chat_id, voting.voting_id, non_voted_users)
    
    async def close_voting_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /close - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""
        chat_id = update.effective_chat.id
        
        voting = self.voting_service.get_active_voting(chat_id)
        if not voting:
            await update.message.reply_text("üìù –í –¥–∞–Ω–Ω–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.")
            return
        
        # –†–∞—Å–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ–º –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º
        if voting.message_id:
            try:
                await self.application.bot.unpin_chat_message(
                    chat_id=chat_id,
                    message_id=voting.message_id
                )
                self.logger.info(f"Unpinned voting message {voting.message_id} in chat {chat_id}")
            except Exception as e:
                self.logger.warning(f"Failed to unpin message: {e}. Message may already be unpinned.")
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
        results = self.voting_service.close_voting(voting.voting_id)
        if not results:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–ø-3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        message = f"üèÅ **–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**\n\n"
        message += f"üó≥ {results['title']}\n"
        message += f"üìä –ò—Ç–æ–≥–æ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–æ: {results['voted_users']}/{results['total_users']}\n\n"
        message += "üèÜ **–¢–æ–ø-3 –¥–Ω—è:**\n"
        
        for i, option in enumerate(results['top_3'], 1):
            emoji = ["ü•á", "ü•à", "ü•â"][i-1] if i <= 3 else f"{i}."
            message += f"{emoji} {option['description']} ‚Äî {option['votes_count']} –≥–æ–ª–æ—Å–æ–≤\n"
        
        if len(results['top_3']) == 0:
            message += "‚ùå –ù–∏–∫—Ç–æ –Ω–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª\n"
        
        await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        await self._send_detailed_results(update, voting.voting_id)
    
    async def _send_detailed_results(self, update: Update, voting_id: int):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results = self.voting_service.get_detailed_results(voting_id)
        if not results:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"üìã **–î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:**\n\n"
        
        for option in results['options']:
            message += f"üìÖ **{option['description']}**: {option['votes_count']} –≥–æ–ª–æ—Å–æ–≤\n"
            if option['voters']:
                for voter in option['voters']:
                    message += f"   üë§ {voter['display_name']} {voter['username']}\n"
            else:
                message += f"   ‚ùå –ù–∏–∫—Ç–æ –Ω–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª\n"
            message += "\n"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Å—Ç—è–º–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(message) > 4000:
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ –æ–ø—Ü–∏—è–º
            base_message = f"üìã **–î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:**\n\n"
            await update.message.reply_text(base_message, parse_mode=ParseMode.MARKDOWN)
            
            for option in results['options']:
                option_message = f"üìÖ **{option['description']}**: {option['votes_count']} –≥–æ–ª–æ—Å–æ–≤\n"
                if option['voters']:
                    for voter in option['voters']:
                        option_message += f"   üë§ {voter['display_name']} {voter['username']}\n"
                else:
                    option_message += f"   ‚ùå –ù–∏–∫—Ç–æ –Ω–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª\n"
                
                await update.message.reply_text(option_message, parse_mode=ParseMode.MARKDOWN)
        else:
            await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        user = update.effective_user
        if not user:
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db_user = User(
            user_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
        self.db.save_user(db_user)
        
        # –ü–∞—Ä—Å–∏–º callback data
        try:
            action, voting_id, option_id = query.data.split(":")
            voting_id = int(voting_id)
            option_id = int(option_id)
        except ValueError:
            await query.edit_message_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            return
        
        if action == "vote":
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            voting = self.db.get_voting(voting_id)
            if not voting:
                await query.answer("–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≥–æ–ª–æ—Å–æ–≤–∞–ª –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞ —ç—Ç—É –æ–ø—Ü–∏—é
            if voting.has_user_voted_for_option(user.id, option_id):
                # –ï—Å–ª–∏ —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª - –æ—Ç–º–µ–Ω—è–µ–º –≥–æ–ª–æ—Å
                success, message = self.voting_service.remove_vote(user.id, option_id, voting_id)
                if success:
                    await self._update_voting_message(query, voting_id)
                    await query.answer("–ì–æ–ª–æ—Å –æ—Ç–º–µ–Ω–µ–Ω")
                else:
                    await query.answer(message, show_alert=True)
            else:
                # –ï—Å–ª–∏ –Ω–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª - –¥–æ–±–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å
                success, message = self.voting_service.vote_for_option(user.id, option_id, voting_id)
                
                if success:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await self._update_voting_message(query, voting_id)
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ–ª–æ—Å–µ
                    await self._send_vote_notification(update.effective_chat.id, user, voting_id, option_id)
                else:
                    await query.answer(message, show_alert=True)
    
    async def _update_voting_message(self, query, voting_id: int):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ–º"""
        message_text = self._format_voting_message(voting_id)
        keyboard = self._create_voting_keyboard(voting_id)
        
        try:
            await query.edit_message_text(
                message_text,
                reply_markup=keyboard,
                parse_mode=ParseMode.MARKDOWN
            )
        except Exception as e:
            self.logger.error(f"Error updating voting message: {e}")
    
    async def _send_vote_notification(self, chat_id: int, user, voting_id: int, option_id: int):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª"""
        stats = self.voting_service.get_voting_stats(voting_id)
        if not stats:
            return
        
        # –ù–∞—Ö–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–ø—Ü–∏–∏
        selected_option = None
        for option in stats['options']:
            if option['option_id'] == option_id:
                selected_option = option
                break
        
        if not selected_option:
            return
        
        user_name = user.first_name or user.username or f"User_{user.id}"
        
        message = (f"‚úÖ {user_name} –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª –∑–∞ {selected_option['description']}!\n"
                  f"üìä –ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–æ: {stats['voted_users']}/{stats['total_users']}")
        
        try:
            await self.application.bot.send_message(chat_id, message)
        except Exception as e:
            self.logger.error(f"Error sending vote notification: {e}")
    
    def _format_voting_message(self, voting_id: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ–º"""
        results = self.voting_service.get_detailed_results(voting_id)
        if not results:
            return "–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        
        message = f"üó≥ **{results['title']}**\n\n"
        message += f"üìä –ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–æ: {results['voted_users']}/{results['total_users']}\n\n"
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ–ø—Ü–∏–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≥–æ–ª–æ—Å–æ–≤ –∏ –±–µ—Ä–µ–º —Ç–æ–ø-3
        sorted_options = sorted(results['options'], key=lambda x: x['votes_count'], reverse=True)
        top_3 = sorted_options[:3]
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-3 –¥–Ω—è —Å –≥–æ–ª–æ—Å—É—é—â–∏–º–∏
        if any(option['votes_count'] > 0 for option in top_3):
            message += "üèÜ **–¢–æ–ø –¥–Ω–∏:**\n"
            
            for i, option in enumerate(top_3):
                if option['votes_count'] > 0:
                    # –ú–µ–¥–∞–ª–∏ –¥–ª—è —Ç–æ–ø-3
                    medals = ["ü•á", "ü•à", "ü•â"]
                    medal = medals[i] if i < len(medals) else f"{i+1}."
                    
                    message += f"{medal} **{option['description']}** ({option['votes_count']} –≥–æ–ª–æ—Å–æ–≤)\n"
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ç–æ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª (—Ç–æ–ª—å–∫–æ display_name, –±–µ–∑ username)
                    if option['voters']:
                        voter_names = [voter['display_name'] for voter in option['voters']]
                        message += f"   üë• {', '.join(voter_names)}\n"
                    
                    message += "\n"
        
        return message
    
    def _create_voting_keyboard(self, voting_id: int) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""
        voting = self.db.get_voting(voting_id)
        if not voting:
            return InlineKeyboardMarkup([])
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –≥–æ–ª–æ—Å–æ–≤
        stats = self.voting_service.get_voting_stats(voting_id)
        if not stats:
            return InlineKeyboardMarkup([])
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–æ–ª–æ—Å–æ–≤ –ø–æ option_id
        votes_count = {option['option_id']: option['votes_count'] for option in stats['options']}
        
        keyboard = []
        for option in voting.options:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤ –¥–ª—è —ç—Ç–æ–π –æ–ø—Ü–∏–∏
            count = votes_count.get(option.option_id, 0)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≥–æ–ª–æ—Å–æ–≤
            if count > 0:
                button_text = f"{option.description} ({count})"
            else:
                button_text = option.description
            
            callback_data = f"vote:{voting_id}:{option.option_id}"
            button = InlineKeyboardButton(button_text, callback_data=callback_data)
            keyboard.append([button])
        
        return InlineKeyboardMarkup(keyboard)
    
    async def _send_ping_message(self, chat_id: int, voting_id: int, message: str):
        """Callback —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ ping —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            await self.application.bot.send_message(
                chat_id, 
                message, 
                parse_mode=ParseMode.MARKDOWN
            )
        except Exception as e:
            self.logger.error(f"Error sending ping message: {e}")
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        self.logger.error(f"Update {update} caused error {context.error}")
    
    async def start_bot(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"""
        self.logger.info("Starting FrienGO bot...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(self.scheduler.start())
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await self.application.initialize()
        await self.application.start()
        await self.application.updater.start_polling()
        
        self.logger.info("FrienGO bot started successfully!")
    
    async def stop_bot(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞"""
        self.logger.info("Stopping FrienGO bot...")
        
        self.scheduler.stop()
        await self.application.updater.stop()
        await self.application.stop()
        await self.application.shutdown()
        
        self.logger.info("FrienGO bot stopped") 