import asyncio
import logging
from datetime import datetime
from typing import Callable, List, Optional

from models import PingSchedule, User
from database import DatabaseManager
from voting import VotingService


class PingScheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∏–Ω–≥–æ–≤"""
    
    def __init__(self, db_manager: DatabaseManager, voting_service: VotingService):
        self.db = db_manager
        self.voting_service = voting_service
        self.logger = logging.getLogger(__name__)
        self.is_running = False
        self.ping_callback: Optional[Callable] = None
    
    def set_ping_callback(self, callback: Callable):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å callback —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏–Ω–≥–æ–≤"""
        self.ping_callback = callback
    
    async def start(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        self.is_running = True
        self.logger.info("Ping scheduler started")
        
        while self.is_running:
            try:
                await self._check_and_send_pings()
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                await asyncio.sleep(300)
            except Exception as e:
                self.logger.error(f"Error in ping scheduler: {e}")
                await asyncio.sleep(60)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º –º–∏–Ω—É—Ç—É
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        self.is_running = False
        self.logger.info("Ping scheduler stopped")
    
    async def _check_and_send_pings(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ –ø–∏–Ω–≥–∏"""
        if not self.ping_callback:
            return
        
        current_time = datetime.now()
        pending_schedules = self.db.get_pending_pings(current_time)
        
        for schedule in pending_schedules:
            voting = self.db.get_voting(schedule.voting_id)
            if not voting:
                continue
            
            # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –ø–∏–Ω–≥–∞
            ping_types = []
            if schedule.ping_24h_at <= current_time and not schedule.is_24h_sent:
                ping_types.append("24h")
            if schedule.ping_48h_at <= current_time and not schedule.is_48h_sent:
                ping_types.append("48h")
            if schedule.ping_72h_at <= current_time and not schedule.is_72h_sent:
                ping_types.append("72h")
            
            for ping_type in ping_types:
                try:
                    await self._send_ping(voting.chat_id, voting.voting_id, ping_type)
                    self.db.mark_ping_sent(schedule.schedule_id, ping_type)
                    self.logger.info(f"Sent {ping_type} ping for voting {voting.voting_id}")
                except Exception as e:
                    self.logger.error(f"Failed to send {ping_type} ping: {e}")
    
    async def _send_ping(self, chat_id: int, voting_id: int, ping_type: str):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏–Ω–≥ –≤ —á–∞—Ç"""
        if not self.ping_callback:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–∞—Ç–∞
        chat_users = self.db.get_chat_users(chat_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        non_voted_users = self.voting_service.get_non_voted_users(voting_id, chat_users)
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∏–Ω–≥–æ–º
        message = self._get_ping_message(ping_type, non_voted_users)
        await self.ping_callback(chat_id, voting_id, message)
    
    def _get_ping_message(self, ping_type: str, non_voted_users: List[User]) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–∏–Ω–≥–∞"""
        time_messages = {
            "24h": "‚è∞ –ü—Ä–æ—à–ª–æ 24 —á–∞—Å–∞ —Å –º–æ–º–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è!",
            "48h": "‚è∞ –ü—Ä–æ—à–ª–æ 48 —á–∞—Å–æ–≤ —Å –º–æ–º–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è!",
            "72h": "üö® –ü—Ä–æ—à–ª–æ 72 —á–∞—Å–∞ —Å –º–æ–º–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è!"
        }
        
        base_message = time_messages.get(ping_type, "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏!")
        
        if not non_voted_users:
            return f"{base_message}\n\nüéâ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏!"
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∏—Ö Telegram ID
        mentions = []
        for user in non_voted_users:
            if user.username:
                # –ï—Å–ª–∏ –µ—Å—Ç—å username, –∏—Å–ø–æ–ª—å–∑—É–µ–º @username
                mentions.append(f"@{user.username}")
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç username, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ ID
                display_name = user.display_name
                mentions.append(f"[{display_name}](tg://user?id={user.user_id})")
        
        return (f"{base_message}\n\n"
               f"üì£ –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ —É–¥–æ–±–Ω—ã–µ –¥–Ω–∏ –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏!\n\n"
               f"üë• –ñ–¥–µ–º –≥–æ–ª–æ—Å–æ–≤ –æ—Ç: {', '.join(mentions)}\n\n"
               f"üó≥ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ–º!")
    
    async def send_manual_ping(self, chat_id: int, voting_id: int, 
                             non_voted_users: List[User]) -> str:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä—É—á–Ω–æ–π –ø–∏–Ω–≥ –Ω–µ–ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–≤—à–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        if not self.ping_callback:
            return "Ping callback –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        
        if not non_voted_users:
            return "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏! üéâ"
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∏—Ö Telegram ID
        mentions = []
        for user in non_voted_users:
            if user.username:
                # –ï—Å–ª–∏ –µ—Å—Ç—å username, –∏—Å–ø–æ–ª—å–∑—É–µ–º @username
                mentions.append(f"@{user.username}")
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç username, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ ID
                display_name = user.display_name
                mentions.append(f"[{display_name}](tg://user?id={user.user_id})")
        
        message = (f"üì¢ –†–µ–±—è—Ç–∞, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å!\n\n"
                  f"üë• –ñ–¥–µ–º –≥–æ–ª–æ—Å–æ–≤ –æ—Ç: {', '.join(mentions)}\n\n"
                  f"üó≥ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ–º!")
        
        try:
            await self.ping_callback(chat_id, voting_id, message)
            return f"–ü–∏–Ω–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –û–∂–∏–¥–∞—é—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: {len(non_voted_users)} —á–µ–ª–æ–≤–µ–∫"
        except Exception as e:
            self.logger.error(f"Failed to send manual ping: {e}")
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏–Ω–≥–∞: {e}" 